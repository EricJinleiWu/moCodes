#ifndef __MO_UTILS_H__
#define __MO_UTILS_H__

#ifdef __cplusplus
extern "C" {
#endif

#include <pthread.h>
#include <semaphore.h>

#define MOUTILS_ERR_OK  0
#define MOUTILS_TPERR_NULLPARAM       (0x00002000)    //input param is NULL.
#define MOUTILS_TPERR_INITPARAMERR    (0x00002001)    //when init threadPool, initThNum larger than maxThNum
#define MOUTILS_TPERR_CREATETHREADFAILED    (0x00002002)    //pthread_create for work thread failed
#define MOUTILS_TPERR_MALLOCFAILED  (0x00002003)        //malloc for memory failed!

typedef void *(*pMoUtilsTpTaskFunc)(void *args);

typedef struct
{
    pMoUtilsTpTaskFunc pFunc;
    void * args;
}MOUTILS_THREADPOOL_TASK;

/*
    DQueue used here, when enqueue, prev pointer being used; when dequeue, last pointer being used; more faster than queue;
*/
typedef struct MOUTILS_THREADPOOL_TASKNODE_t
{
    MOUTILS_THREADPOOL_TASK task;
    struct MOUTILS_THREADPOOL_TASKNODE_t * prev;
    struct MOUTILS_THREADPOOL_TASKNODE_t * next;
}MOUTILS_THREADPOOL_TASKNODE;

typedef struct
{
    unsigned int initThNum;
    unsigned int maxThNum;    
    unsigned int curThNum;  //currently, how many threads running, if a thread exit, this number --;
    pthread_t * pThreadIds;  //all threads being created will set its thread id to this var.
    pthread_mutex_t mutex;  //should lock resource when add or delete a node from controler.
    sem_t sem;
    MOUTILS_THREADPOOL_TASKNODE * head; //point to the first node of taskList;
    MOUTILS_THREADPOOL_TASKNODE * tail; //point to the last node of taskList;
    unsigned int curTaskListSize;   //the size of taskList, should have a max value, if larger than it, cannot add new task to list
    unsigned int maxTaskListSize;   //the max size of taskList
    unsigned char isInited; //flag, is init or not; 0--not init or init failed; 1--inited;
}MOUTILS_THREADPOOL_CTR;

/*
    ThreadPool init: init the taskList and others;

    @initThNum : when init, create threads number;
    @maxThNum : when running, if taskList donot have idle node, should expand list to this length;
    @pCtr : The pointer of controller to this thread poll;

    return 0 if succeed, else error. if init ok, pCtr is valid; Or it meaningless;
*/
int moUtils_ThreadPool_init(const unsigned int initThNum, const unsigned int maxThNum,
    const unsigned int maxTaskListSize, MOUTILS_THREADPOOL_CTR *pCtr);

/*
    Add a new task to threadpoll;

    @pFunc : task being done in this function;
    @args : arguments to @pFunc;

    return 0 if add succeed;
    or return err, for example, taskList all being used, cannot add new node;
*/
int moUtils_ThreadPool_addTask(MOUTILS_THREADPOOL_CTR *pCtr, pMoUtilsTpTaskFunc pFunc, void * args);

/*
    ThreadPool uninit: free resource being malloced, and destroy all threads being create;
*/
void moUtils_ThreadPool_unInit(MOUTILS_THREADPOOL_CTR *pCtr);


#ifdef __cplusplus
}
#endif

#endif